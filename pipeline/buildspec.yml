version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.9
    commands:
      - echo "=== Installing Terraform ==="
      - echo "Checking current directory and available tools..."
      - pwd
      - ls -la
      - echo "Checking for existing tools..."
      - which curl wget unzip || echo "Some tools missing"
      - echo "=== Attempting to download Terraform ==="
      - curl -v -fsSL https://releases.hashicorp.com/terraform/1.6.0/terraform_1.6.0_linux_amd64.zip -o terraform.zip
      - echo "=== Checking download result ==="
      - ls -la terraform.zip
      - file terraform.zip || echo "file command not available"
      - echo "=== Attempting to unzip ==="
      - unzip -t terraform.zip || echo "Zip test failed, trying alternative approach"
      - unzip terraform.zip || echo "Unzip failed, checking if terraform is pre-installed"
      - echo "=== Checking if terraform binary exists ==="
      - ls -la terraform || echo "No terraform binary found"
      - echo "=== Making terraform executable and moving to PATH ==="
      - chmod +x terraform || echo "chmod failed"
      - sudo mv terraform /usr/local/bin/ || mv terraform /usr/local/bin/ || echo "mv failed"
      - echo "=== Checking terraform installation ==="
      - terraform version || terraform --version || echo "Terraform not working, checking if pre-installed"
      - which terraform || echo "Terraform not in PATH"
      - /usr/local/bin/terraform --version || echo "Terraform not in /usr/local/bin"
      - echo "=== Terraform installation completed ==="

  pre_build:
    commands:
      - echo "=== Pre-build phase started ==="
      - echo "Current directory is $(pwd)"
      - echo "Directory contents:"
      - ls -la
      - echo "=== Checking for terraform directory ==="
      - ls -la | grep terraform || echo "No terraform directory found"
      - echo "=== Navigating to terraform directory ==="
      - cd terraform || (echo "terraform directory not found, listing contents:" && ls -la && exit 1)
      - echo "Terraform directory contents:"
      - ls -la
      - echo "=== Creating terraform.tfvars ==="
      - echo 'project_name = "terraform-conformity-demo-v2"' > terraform.tfvars
      - echo 'conformity_region = "us-east-1"' >> terraform.tfvars
      - echo 'github_owner = "adusei2023"' >> terraform.tfvars
      - echo 'github_repo = "terraform-conformity-pipeline"' >> terraform.tfvars
      - echo 'github_branch = "main"' >> terraform.tfvars
      - echo 'aws_region = "us-east-1"' >> terraform.tfvars
      - echo 'conformity_api_key = "dummy-will-be-overridden"' >> terraform.tfvars
      - echo 'github_token = "dummy-will-be-overridden"' >> terraform.tfvars
      - echo 'github_webhook_secret = "dummy-will-be-overridden"' >> terraform.tfvars
      - echo "=== terraform.tfvars created ==="
      - cat terraform.tfvars
      - echo "=== Running terraform init ==="
      - terraform init

  build:
    commands:
      - echo "=== Build phase started ==="
      - echo "=== Running terraform validate ==="
      - terraform validate
      - echo "=== Running terraform plan ==="
      - terraform plan -out=tfplan
      - echo "=== Terraform plan completed successfully ==="
      - echo "=== Security scan completed (demo) ==="

  post_build:
    commands:
      - echo "=== Post-build phase ==="
      - echo "Build completed successfully at $(date)"

artifacts:
  files:
    - '**/*'